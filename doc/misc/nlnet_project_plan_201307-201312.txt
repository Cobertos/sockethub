Sockethub
=========

1. Background
-------------

 Sockethub has been around for 6 months now, and it is essentially a polyglot messaging service. It uses WebSockets to send & receive simple JSON objects (which are loosley based on ActivityStreams) which define messages. By specifying the 'platform' in the JSON object, developers can integrate with Facebook, Twitter, Email, XMPP and more, using the same object structure.

 The idea being, developers can write their apps with generic messages represented as JSON objects, and as platforms come and go, the application does not need to change it's protocol or API support constantly.


2. Existing work & results
--------------------------

 So far, what we have done with Sockethub and related areas:

 - Core:
 Developed a solid and scalable core web-socket service which accepts and verifies the requests as they come in from front-end applications. It then dispatches these jobs to a number of different platforms to be carried out, sending the results back to the application. The core continues to increase in stability and comes with hundreds of unit & integration tests.

- Pluggable platforms interface:
 There is a modular infrastructure in place which makes it very easy to add or modify platforms as needed. Administrators can create custom platforms outside the scope of Sockethub, or improve/add to core sockethub platforms.

- Platforms:
 A number of platforms have been created as part of the Sockethub distribution, including: Twitter, Facebook, XMPP, RSS, Email

- Sockethub Client:
 A client-library for app developers to use making the communication back and forth from the Sockethub service easier. It handles all the error handling, event emitting, and state management.

- Demos:
 The 'examples/' directory hosts demonstrations of each of the platforms functionality. It is updated as platform features are added.

- Apps:
 Where the demos are very basic and illustrate the steps involved in implementation, the applications provide actual end-user tools to make use of sockethub. Currently there is Dogfeed (and RSS reader), and Dogtalk (an XMPP client). They are at varying levels of alpha release and will continue to improve.

- Speaking & Collaboration:
 So far I've given a few talks, and have collaborated together on a few different projects to help get more exposure to Sockethub as well as network and meet more people working in the same general problem-space.



3. Mission and am of the project
---------------------------------

 In the same way user storage can be put in control of the user, so can other  commonly used services - such as messaging.

 Instead of picking and choosing the various protocols and APIs an application will support, developers can design their applications independant of any one protocol. In this way Sockethub can provide a generic messaging service which paints application development in a different light.

 The end result are web applications built ontop of pluggable service back-ends that the user of the app defines. This gives the application more autonomy and potential longevity (able to function and be deployed on any server, and linked to open-source and standard backend services).

 Developers can begin to write apps for the future, with no monolithic dependencies tying everything to one server, or set of servers.

 Users can begin to expect more autonomy in their choice of applications and interfacing with other services on the web.



4. Project proposal
-------------------

For the next 6 months the planned work for Sockethub is:

- Further improvement of the Sockethub core.
- Further expansion of platforms and platform features
- Further imrpovement of apps which make use of Sockethub
- Adopt a frequest and stable release cycle
- Improve compatibility with Acitivty Streams (and look into AS2.0 which will be JSON-LD compliant)
- Improve visibility by writing to various groups.
- Look into support for things like Salmon, Oauth, pubsubhubbub - things with HTTP callback needs

4.1 Project management
----------------------

 The project has been, and will continue to be lead by Nick Jennings, and the core technologies are JavaScript, JSON schemas, and Node.js. For application development we're using AngularJS with Bootstrap primarily.


4.2 Project risks
------------------
- Lack of apps
 Even though Tthe approach will open up a lotton of potential functionality for web application developers, however one of the risks is that no one develops anything of much interest. However, we feel there is enough interest already being expressed for this type of functionality, by from talented developers, that this scenario is highly unlikely. In addition, to help mitigate this, I would also develop functional demo apps as part of the documentation process, so that users canould already put their polyglot servers to use from the start.

- Closed APIs
 As one of the fundamental points of the project is to interface with the public APIs of several major social networking sites, a bit we face a minor risk is ifof these sites suddenly decidinge to stop providing these APIs as a service to external application developers. This would, of course, have major implications all over the web, and not just for this project.

- Adoption?
 Unlike the 'esperanto' approach, the lack of adoption is not really a risk, because the polyglot approach is the solution to the network-effect problem.


4.3 Oversight & reporting
-------------------------

 All oversight and reporting will be handled by Nick Jennings. Monthly progress updates will be sent via email.


4.4 Planning
------------

 A lot of these goals are ongoing, so it's hard to break it down into time-frames but I can give an idea of where I hope we are as head milestone (month) arrives:

 M1: Improved releases with stability and testing by other groups

 M2: Application maturity and promotion with at least 1 app, improvements in all. Work toward providing HTTP endpoint listeners for platform flexibility.

 M3: More complete support for existing platforms (verbs+ platforms+), "1.0" release,

 M4: More exposure (JavaScript lists, hackernews etc), API refinement, collaboration and outreach.

 M5: Integration with 3rd party service providers (ie. remoteStorage providers), more apps from other people.

 M6: Improved client libs to hide any API changes, clear path for AS2.0 and the future of Sockethub.


4.5 Funding
-----------
We will try to complete the above scope within the time allotted, which is six months for 1 FTE financed out of the project, and other people participating in the project for free (in their spare time or as unpaid interns). This schedule will run from 1 July 2013 to 1 Jan 2014. The budget is 6x = 9000 euros.



5. Administration
-----------------

All administrative needs, contract signing, can be handled by Nick Jennings.
