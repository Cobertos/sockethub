The Polyglot Social Web
=======================


1. Project plan
---------------
This project aims to implement a service which enables developers to use common social functions regardless of the 'language' of the various protocols out in the wild. The core principles and background are outlined at www.useraddress.net.

The implementation will revolve around a socket server, with a clearly defined protocol/API that the developers can use as a tool to execute actions mainly focused on social interaction on the internet -. Iidentifying users, sending messages, subscribing, sharing, chatting. It will speak whatever language (protocol) necessary to carry out the action, abstracting the implementation details of the various APIs from the developer and. Lleaving them to focus on creating rich web applications while and providing as much compatibility as possible.

The app developer can utilize one tool, indicate what they'd like to do, and that tool goes out and 'speaks the right language' to get the job done.


        1.1 The problem solved by this project
        --------------------------------------
        Currently, there are numerousseveral attempts to implement aspects of the open social web;, however, many of these projects are working on the same area and do not interoperate. There are about 40 different projects like this, including StatusNet, Diaspora, Friendica, BuddyCloud, Crabgrass, Apache Wave, to name but a few. If you include the ones that do not expose a web interface, then there are even more. This lack of interoperability leaves the landscape extremely fragmented and incohesive. 
        
        Outside of the realm of social networking, we have many other projects which aim to solve a certainsome aspect of the toolchain. Again, these tools often speak different languages and therefore leave a developer to pick and choose which ones they will support, becoming isolated from those who've chosen another solution.
        
        For example, some of the different problem domains being worked on, and the existing solutions:
        
        - Profile: WebFinger, Simple Web Discovery, WebID/FOAF, Gravatar
        - Messaging: email, Jabber, IRC, Skype, SIP, SMS
        - Presence: Jabber
        - Pub/Sub: pubsubhubbub, xmpp-pubsub, atom/rss, Twitter 'follow', Facebook newsfeed, mailing lists, Usenet groups, IRC
        - Comment: comments on blogs, salmon protocol, WebID-based
read-write web, Facebook wall posts.
        
        Using the polyglot approach, the developer can use one service to expose functionality to the application user without havingthe need to worry about what technologies the user's friends of that user are using. The socket server (the service) will be run-able by anyone;, a user could run their own or the remoteStorage.js provider could run one as a service to their users. In that way, it will behave much in the same way as remoteStorage.js does.
        

        1.2 The relative advantage of the proposed innovation         
        -----------------------------------------------------
        The advantage of this approach is that the there is no need to pick any winners or loosers. The user's polyglot server would speak as many of the protocols as possible, allowing them users to communicate without being trapped in the silo of the technology they use to solve each purpose. These 'esperanto-style' networks are usually only used by a small group of people and always stay fragmented and much smaller than the big commercial networks because of the network effect. 


        1.3 Usability: For whom and to what purpose
        -------------------------------------------
        The main target of this project would be to existing developers, who would develop apps that communicate with the user's polyglot server via sockets from their web app. One important advantage for the developer is that they no longer have to make the choice of which technology to usechoose for each of the social services they wish to provide in their app. In addition, they don't have to implement all these services themselves;, the user's polyglot server takes care of all of handling of different protocols, providing one simplified API for the developer for use in their application.
        
        For users, they suddenly have a much higher success rate of connecting with friends whichwho may be using one of the many different technologies that are otherwise inoperable together. The various choices of which service or communication medium to use and medium of communicating with friends becomes less important and less of a hurdle.


        1.4 Perspectives for further development of this innovation and/or other technologies
        -------------------------------------------------------------------------------------
        The polyglot server comes with no user-facing interface, but it exposes a cross-origin interface that can be addressed from unhosted web apps. So iIt would solve the fedsocweb problem, and at the same time encourage people to develop unhosted web apps that interact with a user's polyglot server. That is good because unhosted web apps are good. Theose unhosted web apps would likely connect with the user's polyglot server as well as with their remoteStorage, and in that way the two projects are very symbiotic. remoteStorage providers could offer a polyglot service to their users and, the users could use a different service, or run their own.
        

        1.5 Relevance for nlnet's mission
        ---------------------------------
        Applications addressing this subject can have a significant impact in the area of the open social web, and online identity and presence. Although users have very powerful social networking tools at their disposal right now, these tools are all owned by commercial companies in a monopolizing way. Working to break these monopolies and putting these technological advances into the public domain can help us to fully realize the potential of social networking, and bridge the silos of online content and identity. 


Adopting a polyglot approach is currently the only viable solution right now to help save the web from monopolies, and I believebeleive this is a very important topic for nlnet and is part of it's mission ("to promote the exchange of electronic information and all that is related or beneficial to that purpose"). 

        
2. Existing work by others
--------------------------

    There are not existing projects that I'm aware of that take the pure polygloat approach. There's thean entire whole body of work that takes the "esperanto" approach (defining a protocol to interact with their social network or service and expecting others to adopt it), but nothing that is trying to bridge all of the different silos out there and speaking all their languages while not forcing the developer to choose.


3. Existing work by us
----------------------
We've begun work on an 'avatar.js' (also posted to the webfinger mailing list) which is a simple javascript library that takes an email address and queries against the host's webfinger service, returning the avatar image.
https://github.com/silverbucket/avatar.js
a working demo is available here:
http://silverbucket.github.com/avatar.js/


4. Project setup
----------------
This project is born from the Unhosted community and so therefore shares the same ideologies and goals as projects such as remoteStorage.js. I will write this software, unit/alpha/beta test iting, and publish it. We publish everything under AGPL for software, and Creative Commons licenses for everything else. The bulk of the development work and project management will be handled by myself (Nick Jennings), and I will commit to one year of full-time development to achieveacheive the goals I've set out to accomplish. I will announce progress to mailing lists and give talks on the subject, and generally work to increase exposure and interest in the project on an ongoing basis.
http://www.linkedin.com/in/nickjennings
http://www.silverbucket.net


5. Project planning
-------------------
I am requesting funding for the completion of theis polyglot server for the span of one year. The bulk of the development will be in implementing a WebSocket server that users can run and connect with using unhosted web apps, and that developers can write applications to integrate with. The socket server will use the simplest language possible to enable the follow features:

   search & profile) - ways to query about users, finding and detailing profile information about a user. 
   message) - send/receive messages to a user (realtime)
   presence) - get information on whether a user is present or not 
   pub/sub) - subscribe to a users feeds (ie. blog, twitter)
   comment) - post comments (non realtime)

It will integrate with existing services both open and proprietary "standards". WebFinger, Diaspora, StatusNET, IRC, XMPP (Jabber), twitter, facebook, atom/rss, SWD, email, etc.

Here is a general timeline for completion of the various parts of the server (by month):
    One Month: search, profile
   Two Months: messaging
    One Month: presence
    One Month: pub/sub
    One Month: commenting



6. Project budgeting
--------------------
We will try to complete the above scope within the time allotted, which is six months for 1 FTE financed out of the project, and other people participating in the project for free (in their spare time or as unpaid interns). This schedule will run from 1 January 2013 to 1 July 2013. The budget is 6x = 9000 euros. 


7. Project risks
----------------

        7.1 Lack of apps
        ----------------
        Even though Tthe approach will open up a lotton of potential functionality for web application developers, however one of the risks is that no one develops anything of much interest. However, we feel there is enough interest already being expressed for this type of functionality, by from talented developers, that this scenario is highly unlikely. In addition, to help mitigate this, I would also develop functional demo apps as part of the documentation process, so that users canould already put their polyglot servers to use from the start.
        
        7.2 Closed APIs
        ---------------
        As one of the fundamental points of the project is to interface with the public APIs of several major social networking sites, a bit we face a minor risk is ifof these sites suddenly decidinge to stop providing these APIs as a service to external application developers. This would, of course, have major implications all over the web, and not just for this project.

        7.3 Adoption?
        -------------
        Unlike the 'esperanto' approach, the lack of adoption is not really a risk, because the polyglot approach is the solution to the network-effect problem.





